
Ws2811Rings.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a5b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001ce  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000012d  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000135  00000000  00000000  00000dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00000ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010b  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b3  00000000  00000000  0000102f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000010e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee ec       	ldi	r30, 0xCE	; 206
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 3b       	cpi	r26, 0xB4	; 180
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  a2:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <send>:
 * be used is an argument to this function. This allows a single instance of this function
 * to control up to 8 separate channels.
 */

void send( const rgb *values, uint16_t array_size, uint8_t bit)
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
    const uint8_t mask =_BV(bit);
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <send+0xe>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	4a 95       	dec	r20
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <send+0xa>
    uint8_t low_val = WS2811_PORT & (~mask);
  bc:	35 b1       	in	r19, 0x05	; 5
  be:	e2 2f       	mov	r30, r18
  c0:	e0 95       	com	r30
  c2:	e3 23       	and	r30, r19
    uint8_t high_val = WS2811_PORT | mask;
  c4:	35 b1       	in	r19, 0x05	; 5
  c6:	23 2b       	or	r18, r19
    uint16_t size = array_size * sizeof values[0]; // size in bytes
  c8:	ab 01       	movw	r20, r22
  ca:	44 0f       	add	r20, r20
  cc:	55 1f       	adc	r21, r21
  ce:	da 01       	movw	r26, r20
  d0:	a6 0f       	add	r26, r22
  d2:	b7 1f       	adc	r27, r23


    // reset the controllers by pulling the data line low
    uint8_t bitcount = 4;
    WS2811_PORT = low_val;
  d4:	e5 b9       	out	0x05, r30	; 5
	
	for (bitcount = 0; bitcount <254; bitcount++){
  d6:	30 e0       	ldi	r19, 0x00	; 0
		
		PORTC = bitcount;
  d8:	38 b9       	out	0x08, r19	; 8
		PORTC = bitcount+1;
  da:	43 2f       	mov	r20, r19
  dc:	4f 5f       	subi	r20, 0xFF	; 255
  de:	48 b9       	out	0x08, r20	; 8
 * The port is determined by the macro WS2811_PORT, but the actual pin to
 * be used is an argument to this function. This allows a single instance of this function
 * to control up to 8 separate channels.
 */

void send( const rgb *values, uint16_t array_size, uint8_t bit)
  e0:	53 2f       	mov	r21, r19
  e2:	5e 5f       	subi	r21, 0xFE	; 254
	
	for (bitcount = 0; bitcount <254; bitcount++){
		
		PORTC = bitcount;
		PORTC = bitcount+1;
		PORTC = bitcount+2;
  e4:	58 b9       	out	0x08, r21	; 8
 * The port is determined by the macro WS2811_PORT, but the actual pin to
 * be used is an argument to this function. This allows a single instance of this function
 * to control up to 8 separate channels.
 */

void send( const rgb *values, uint16_t array_size, uint8_t bit)
  e6:	3d 5f       	subi	r19, 0xFD	; 253
	for (bitcount = 0; bitcount <254; bitcount++){
		
		PORTC = bitcount;
		PORTC = bitcount+1;
		PORTC = bitcount+2;
		PORTC = bitcount+3;
  e8:	38 b9       	out	0x08, r19	; 8
    WS2811_PORT = low_val;
	
	for (bitcount = 0; bitcount <254; bitcount++){
		
		PORTC = bitcount;
		PORTC = bitcount+1;
  ea:	34 2f       	mov	r19, r20

    // reset the controllers by pulling the data line low
    uint8_t bitcount = 4;
    WS2811_PORT = low_val;
	
	for (bitcount = 0; bitcount <254; bitcount++){
  ec:	4e 3f       	cpi	r20, 0xFE	; 254
  ee:	a1 f7       	brne	.-24     	; 0xd8 <send+0x2e>
	

    // note: the labels in this piece of assembly code aren't very explanatory. The real documentation
    // of this code can be found in the spreadsheet ws2811@8Mhz.ods
    // The order of the blocks of code have been determined by arrange_timed_code.cpp
    asm volatile(
  f0:	ec 01       	movw	r28, r24
  f2:	44 e0       	ldi	r20, 0x04	; 4
  f4:	09 90       	ld	r0, Y+
  f6:	00 0c       	add	r0, r0
  f8:	e0 f4       	brcc	.+56     	; 0x132 <P0x19>
  fa:	2e c0       	rjmp	.+92     	; 0x158 <L1x00>

000000fc <L0005>:
  fc:	41 50       	subi	r20, 0x01	; 1
  fe:	59 f4       	brne	.+22     	; 0x116 <Mx008>
 100:	09 90       	ld	r0, Y+
 102:	44 e0       	ldi	r20, 0x04	; 4
 104:	25 b9       	out	0x05, r18	; 5
 106:	00 00       	nop
 108:	e5 b9       	out	0x05, r30	; 5
 10a:	11 97       	sbiw	r26, 0x01	; 1
 10c:	69 f0       	breq	.+26     	; 0x128 <Hx017>
 10e:	00 0c       	add	r0, r0
 110:	80 f4       	brcc	.+32     	; 0x132 <P0x19>
 112:	22 c0       	rjmp	.+68     	; 0x158 <L1x00>

00000114 <M1006>:
 114:	00 c0       	rjmp	.+0      	; 0x116 <Mx008>

00000116 <Mx008>:
 116:	e5 b9       	out	0x05, r30	; 5
 118:	00 00       	nop
 11a:	25 b9       	out	0x05, r18	; 5
 11c:	00 00       	nop
 11e:	e5 b9       	out	0x05, r30	; 5
 120:	00 00       	nop
 122:	00 0c       	add	r0, r0
 124:	b0 f0       	brcs	.+44     	; 0x152 <P1x17>
 126:	04 c0       	rjmp	.+8      	; 0x130 <P0x18>

00000128 <Hx017>:
 128:	00 c0       	rjmp	.+0      	; 0x12a <XX0>

0000012a <XX0>:
 12a:	00 00       	nop
 12c:	25 b9       	out	0x05, r18	; 5
 12e:	3f c0       	rjmp	.+126    	; 0x1ae <END>

00000130 <P0x18>:
 130:	e5 b9       	out	0x05, r30	; 5

00000132 <P0x19>:
	...

00000134 <L0x00>:
 134:	25 b9       	out	0x05, r18	; 5
 136:	00 0c       	add	r0, r0
 138:	e5 b9       	out	0x05, r30	; 5
 13a:	00 f7       	brcc	.-64     	; 0xfc <L0005>
 13c:	41 50       	subi	r20, 0x01	; 1
 13e:	41 f5       	brne	.+80     	; 0x190 <Mx107>
 140:	09 90       	ld	r0, Y+
 142:	44 e0       	ldi	r20, 0x04	; 4
 144:	00 00       	nop
 146:	25 b9       	out	0x05, r18	; 5
 148:	11 97       	sbiw	r26, 0x01	; 1
 14a:	59 f1       	breq	.+86     	; 0x1a2 <Hx115>
 14c:	00 0c       	add	r0, r0
 14e:	08 f0       	brcs	.+2      	; 0x152 <P1x17>
 150:	ef cf       	rjmp	.-34     	; 0x130 <P0x18>

00000152 <P1x17>:
	...

00000154 <P1x18>:
 154:	e5 b9       	out	0x05, r30	; 5
	...

00000158 <L1x00>:
 158:	25 b9       	out	0x05, r18	; 5
 15a:	00 0c       	add	r0, r0
 15c:	70 f0       	brcs	.+28     	; 0x17a <L1104>
 15e:	41 50       	subi	r20, 0x01	; 1
 160:	c9 f6       	brne	.-78     	; 0x114 <M1006>
 162:	09 90       	ld	r0, Y+
 164:	44 e0       	ldi	r20, 0x04	; 4
 166:	e5 b9       	out	0x05, r30	; 5
 168:	00 00       	nop
 16a:	25 b9       	out	0x05, r18	; 5
 16c:	00 00       	nop
 16e:	e5 b9       	out	0x05, r30	; 5
 170:	11 97       	sbiw	r26, 0x01	; 1
 172:	d1 f2       	breq	.-76     	; 0x128 <Hx017>
 174:	00 0c       	add	r0, r0
 176:	e8 f6       	brcc	.-70     	; 0x132 <P0x19>
 178:	ef cf       	rjmp	.-34     	; 0x158 <L1x00>

0000017a <L1104>:
 17a:	41 50       	subi	r20, 0x01	; 1
 17c:	49 f4       	brne	.+18     	; 0x190 <Mx107>
 17e:	09 90       	ld	r0, Y+
 180:	e5 b9       	out	0x05, r30	; 5
 182:	44 e0       	ldi	r20, 0x04	; 4
 184:	25 b9       	out	0x05, r18	; 5
 186:	11 97       	sbiw	r26, 0x01	; 1
 188:	61 f0       	breq	.+24     	; 0x1a2 <Hx115>
 18a:	00 0c       	add	r0, r0
 18c:	10 f3       	brcs	.-60     	; 0x152 <P1x17>
 18e:	d0 cf       	rjmp	.-96     	; 0x130 <P0x18>

00000190 <Mx107>:
 190:	00 00       	nop
 192:	e5 b9       	out	0x05, r30	; 5
 194:	00 00       	nop
 196:	25 b9       	out	0x05, r18	; 5
 198:	00 c0       	rjmp	.+0      	; 0x19a <XX1>

0000019a <XX1>:
 19a:	00 00       	nop
 19c:	00 0c       	add	r0, r0
 19e:	c8 f2       	brcs	.-78     	; 0x152 <P1x17>
 1a0:	c7 cf       	rjmp	.-114    	; 0x130 <P0x18>

000001a2 <Hx115>:
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <XX2>

000001a4 <XX2>:
 1a4:	00 00       	nop
 1a6:	e5 b9       	out	0x05, r30	; 5
 1a8:	00 00       	nop
 1aa:	25 b9       	out	0x05, r18	; 5
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <END>

000001ae <END>:
 1ae:	00 00       	nop
[bytes]   "w" (size),		// number of bytes to send
[bits]    "d" (bitcount),       // number of bits/2
[portout] "I" (_SFR_IO_ADDR(WS2811_PORT)) // The port to use
    );

}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <main>:
	{0,0,10}, {0,10,0}, {10,0,0},
 };
	
int main(void)
{
	DDRB = _BV(3);
 1b6:	88 e0       	ldi	r24, 0x08	; 8
 1b8:	84 b9       	out	0x04, r24	; 4
	
    while(1)
    {
		
		send( buffer, 60, 3);
 1ba:	43 e0       	ldi	r20, 0x03	; 3
 1bc:	6c e3       	ldi	r22, 0x3C	; 60
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 55 00 	call	0xaa	; 0xaa <send>
 1c8:	f8 cf       	rjmp	.-16     	; 0x1ba <main+0x4>

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
